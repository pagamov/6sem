(defun copy-array (arr)
  (let* ((dimensions (array-dimensions arr)) (new-arr (make-array dimensions)))
    (dotimes (i (array-total-size arr))
      (setf (row-major-aref new-arr i)
            (row-major-aref arr i)))
    new-arr))

(defun fun (mat)
  (let ((size (array-dimensions mat)))
    (let ((lines (first size)) (columns (second size)) (ans (copy-array mat)))
      (do ((i 0 (+ i 1)))
        ((>= i lines) ans)
          (do ((j (- columns 1) (- j 1)))
            ((< j 0) 'done_str)
            (if (> i 0)
              (setf (aref ans i j) (+ (aref ans (- i 1) j)
                                    (aref ans i j))))
            (if (< j (- columns 1))
              (setf (aref ans i j) (+ (aref ans i (+ j 1))
                                   (aref ans i j))))
            (if (and (> i 0) (< j (- columns 1)))
              (setf (aref ans i j) (- (aref ans i j)
                                    (aref ans (- i 1) (+ j 1)))))
          )))))


(setq arr1 (make-array '(2 3) :initial-element 1))
;; #2A((1 1 1) (1 1 1))
(setq ans1 (fun arr1))
;; #2A((3 2 1) (6 4 2))
(setq arr1 (make-array '(3 4) :initial-element 2))
;; #2A((2 2 2 2) (2 2 2 2) (2 2 2 2))
(setq ans1 (fun arr1))
;; #2A((8 6 4 2) (16 12 8 4) (24 18 12 6))
